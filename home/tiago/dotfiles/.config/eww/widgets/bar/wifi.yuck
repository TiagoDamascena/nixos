(defwidget wifi []
  (eventbox
    :class "icon wifi ${wifi.status}"
    :cursor "pointer"
    :onhover "${EWW_CMD} update wifiHover=true"
    :onhoverlost "${EWW_CMD} update wifiHover=false"
    :onclick {wifi.type == "wifi" ? "scripts/menu open wifimenu &" : ""}
    (box
      :class "icon-container ${wifiHover ? "hover expand" : ""}"
      :orientation "h"
      :space-evenly false
      :spacing {wifiHover ? 10 : 0}
      (overlay
        :visible {wifi.type == "wifi"}
        (label :class "overlay" :text "")
        (label :class "wifi-icon wifi-25" :visible {wifi.status == "connecting" || rssi < -70} :text "")
        (label :class "wifi-icon wifi-50" :visible {wifi.status == "connecting" || (rssi >= -70 && rssi < -60)} :text "")
        (label :class "wifi-icon wifi-75" :visible {wifi.status == "connecting" || (rssi >= -60 && rssi < -50)}  :text "")
        (label :class "wifi-icon wifi-100" :visible {wifi.status == "connecting" || rssi >= -50}  :text "")
      )
      (overlay
        :visible {wifi.type == "lan"}
        (label :class "overlay" :text "")
        (label :class "wifi-icon" :visible {wifi.status == "connected"} :text "")
      )
      (revealer
        :transition "slideright"
        :reveal {wifiHover}
        :duration 200
        (label :class "tooltip" :text "${wifi.network}")
      )
    )
  )
)

(defwidget wifimenubox []
  (box
    :class "dropdown wifimenu-box"
    :orientation "v"
    :spacing 15
    :space-evenly false
    (box
      :orientation "h"
      :spacing 5
      :space-evenly false
      (label
        :class "title"
        :halign "start"
        :hexpand true
        :text "Wi-Fi"
      )
      (eventbox
        :class "checkbox"
        :cursor "pointer"
        :onclick {wifi.enabled == 0 ? "nmcli radio wifi on" : "nmcli radio wifi off"}
        (label
          :text {wifi.enabled == 1 ? "" : ""}
        )
      )
    )
    (box :class "hr" :height 1)
    (box
      :orientation "v"
      :spacing 10
      :space-evenly false
      (label
        :class "title"
        :halign "start"
        :text "Networks"
      )
      (box
        :class "connections"
        :orientation "v"
        :spacing 10
        :space-evenly false
        (for connection in {networks.connections}
          (eventbox
            :class {connection.active == 1 ? "network active" : "network"}
            :cursor "pointer"
            :onclick {connection.active == 0 ? "nmcli device wifi connect ${connection.ssid}" : ""}
            (box
              :orientation "h"
              :spacing 10
              :space-evenly false
              (label
                :class "icon"
                :text ""
              )
              (label
                :class "label"
                :limit-width 38
                :show-truncated false
                :text {connection.ssid}
              )
            )
          )
        )
      )
    )
    (box :class "hr" :height 1)
    (box
      :orientation "v"
      :spacing 10
      :space-evenly false
      (eventbox
        :cursor "pointer"
        :onclick "eww update wifishowlist=true"
        (box
          :orientation "h"
          :spacing 10
          :space-evenly false
          (label
            :class "title"
            :halign "start"
            :hexpand true
            :text "Other Networks"
          )
          (label
            :class "icon"
            :text {wifishowlist ? "" : ""}
          )
        )
      )

      (revealer
        :transition "slidedown"
        :duration 200
        :reveal {wifishowlist && arraylength(networks.others) > 0}
        (box
          :height 300
          (scroll
            :hscroll false
            :vscroll true
            (box
              :class "networks"
              :orientation "v"
              :spacing 10
              :space-evenly false
              (for wifi in {networks.others}
                (eventbox
                  :class "network"
                  :cursor "pointer"
                  :onclick "scripts/bar/wifipassword ${wifi.ssid}"
                  (box
                    :orientation "h"
                    :spacing 10
                    :space-evenly false
                    (box
                      :class "icon"
                      (overlay
                        (label :class "overlay" :text "")
                        (label
                          :text {wifi.signal > 75 ? "" : wifi.signal > 50 ? "" : wifi.signal > 25 ? "" : ""}
                        )
                      )
                    )
                    (label
                      :class "label"
                      :limit-width 38
                      :show-truncated false
                      :text {wifi.ssid}
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

(defwidget wifipasswordbox []
  (box
    :class "popup wifipassword-box"
    :orientation "v"
    :spacing 20
    :space-evenly false
    (label
      :class "title"
      :text "Password"
    )
    (label
      :wrap true
      :xalign 0
      :text "The Wi-fi network ${ssid} requires a password to connect:"
    )
    (input
      :class "input"
      :onchange "eww update passwd='{}'"
      :password true
    )
    (box
      :spacing 20
      :space-evenly true
      (eventbox
        :class "button"
        :height 30
        :cursor "pointer"
        :onclick "eww close wifipassword"
        (box
          (label :text "Cancel")
        )
      )
      (eventbox
        :class "button"
        :height 30
        :cursor "pointer"
        :onclick "scripts/bar/wificonnect ${ssid} ${passwd}"
        (box
          (label :text "Connect")
        )
      )
    )
  )
)

(defwindow wifimenu
	:geometry (geometry
    :x "10"
    :y "55"
    :anchor "top right"
    :width "390px")
  :stacking "fg"
  (wifimenubox)
)

(defwindow wifipassword
  :geometry (geometry
    :x "0"
    :y "0"
    :anchor "center center"
    :width "400px"
    :height "200px"
  )
  :focusable true
  :stacking "fg"
  :windowtype "dialog"
  (wifipasswordbox)
)

(defpoll rssi :interval "5s" :initial 0
  "scripts/bar/getrssi"
)

(deflisten wifi :initial '{"type": "wifi", "enabled": 0, "status": "disconnected", "network": ""}'
  "scripts/bar/getwifi"
)

(deflisten networks :initial '{"connections": [], "others": []}'
  "scripts/bar/getnetworks"
)

(defvar wifiHover false)
(defvar wifishowlist false)
(defvar ssid "")
(defvar passwd "")